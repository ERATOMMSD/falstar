// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/scala/falstar/parser/Scanner.flex

package falstar.parser;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\6\1\7\3\0\1\10\1\0\4\11\1\0\1\12"+
    "\1\13\1\11\12\14\1\0\1\15\1\6\1\16\1\17"+
    "\2\0\32\20\1\0\1\21\2\0\1\20\1\0\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\20\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\20\1\0\1\52\10\0\1\3\u01a2\0\2\3\326\0"+
    "\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\2\1\2\3\1\4\1\5"+
    "\1\1\20\6\1\1\2\7\1\0\1\10\3\0\13\6"+
    "\1\3\6\6\1\3\12\6\1\4\16\6\1\3\63\6"+
    "\1\3\60\6";

  private static int [] zzUnpackAction() {
    int [] result = new int[182];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\126\0\201\0\254\0\327\0\u0102"+
    "\0\126\0\u012d\0\u0158\0\126\0\u0183\0\u01ae\0\u01d9\0\u0204"+
    "\0\u022f\0\u025a\0\u0285\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c"+
    "\0\u0387\0\u03b2\0\u03dd\0\u0408\0\u0433\0\u045e\0\126\0\u0489"+
    "\0\327\0\126\0\u04b4\0\u04df\0\u050a\0\u0535\0\u0560\0\u058b"+
    "\0\u05b6\0\u05e1\0\u060c\0\u0637\0\u0662\0\u068d\0\u06b8\0\u06e3"+
    "\0\u070e\0\u0739\0\u0764\0\u078f\0\u07ba\0\u07e5\0\u0810\0\u01ae"+
    "\0\u083b\0\u0866\0\u0891\0\u08bc\0\u08e7\0\u0912\0\u093d\0\u0968"+
    "\0\u0993\0\u09be\0\u050a\0\u09e9\0\u0a14\0\u0a3f\0\u0a6a\0\u0a95"+
    "\0\u0ac0\0\u0aeb\0\u0b16\0\u0b41\0\u0b6c\0\u0b97\0\u0bc2\0\u0bed"+
    "\0\u0c18\0\u0c43\0\u0c6e\0\u0c99\0\u0cc4\0\u0cef\0\u0d1a\0\u0d45"+
    "\0\u0d70\0\u0d9b\0\u0dc6\0\u0df1\0\u0e1c\0\u0e47\0\u0e72\0\u0e9d"+
    "\0\u0ec8\0\u0ef3\0\u0f1e\0\u0f49\0\u0f74\0\u0f9f\0\u0fca\0\u0ff5"+
    "\0\u1020\0\u104b\0\u1076\0\u10a1\0\u10cc\0\u10f7\0\u1122\0\u114d"+
    "\0\u1178\0\u11a3\0\u11ce\0\u11f9\0\u1224\0\u124f\0\u127a\0\u0c43"+
    "\0\u12a5\0\u12d0\0\u12fb\0\u1326\0\u1351\0\u137c\0\u13a7\0\u13d2"+
    "\0\u13fd\0\u1428\0\u1453\0\u147e\0\u14a9\0\u14d4\0\u14ff\0\u152a"+
    "\0\u1555\0\u1580\0\u15ab\0\u15d6\0\u1601\0\u14d4\0\u162c\0\u1657"+
    "\0\u1682\0\u16ad\0\u16d8\0\u1703\0\u172e\0\u1759\0\u1784\0\u17af"+
    "\0\u17da\0\u1805\0\u1830\0\u185b\0\u1886\0\u18b1\0\u18dc\0\u1907"+
    "\0\u1932\0\u195d\0\u1988\0\u19b3\0\u19de\0\u1a09\0\u1a34\0\u1a5f"+
    "\0\u1a8a\0\u1ab5\0\u1ae0\0\u1b0b\0\u1b36\0\u1b61\0\u1b8c\0\u1bb7"+
    "\0\u1be2\0\u1c0d\0\u1c38\0\u1c63\0\u1c8e\0\u1cb9";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[182];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\3\1\13\1\14\1\15\1\6\1\16"+
    "\1\3\1\17\1\16\1\20\1\21\1\22\1\23\2\16"+
    "\1\24\1\16\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\5\16\1\36\2\4\1\37\2\0"+
    "\1\40\45\4\55\0\1\4\66\0\1\11\34\0\7\41"+
    "\1\42\11\41\1\43\31\41\10\0\1\11\54\0\1\44"+
    "\1\0\1\13\3\0\1\16\1\0\30\16\13\0\1\44"+
    "\1\45\1\13\3\0\1\16\1\0\30\16\17\0\2\11"+
    "\45\0\1\16\1\0\1\16\3\0\1\16\1\0\30\16"+
    "\13\0\1\16\1\0\1\16\3\0\1\16\1\0\1\16"+
    "\1\46\10\16\1\47\1\16\1\50\13\16\13\0\1\16"+
    "\1\0\1\16\3\0\1\16\1\0\12\16\1\51\2\16"+
    "\1\52\12\16\13\0\1\16\1\0\1\16\3\0\1\16"+
    "\1\0\4\16\1\53\23\16\13\0\1\16\1\0\1\16"+
    "\3\0\1\16\1\0\21\16\1\54\2\16\1\55\3\16"+
    "\13\0\1\16\1\0\1\16\3\0\1\16\1\0\1\56"+
    "\11\16\1\57\15\16\13\0\1\16\1\0\1\16\3\0"+
    "\1\16\1\0\13\16\1\60\1\61\13\16\13\0\1\16"+
    "\1\0\1\16\3\0\1\16\1\0\1\62\14\16\1\63"+
    "\12\16\13\0\1\16\1\0\1\16\3\0\1\16\1\0"+
    "\1\64\27\16\13\0\1\16\1\0\1\16\3\0\1\16"+
    "\1\0\4\16\1\65\10\16\1\66\12\16\13\0\1\16"+
    "\1\0\1\16\3\0\1\16\1\0\16\16\1\67\1\16"+
    "\1\70\2\16\1\71\4\16\13\0\1\16\1\0\1\16"+
    "\3\0\1\16\1\0\1\72\7\16\1\73\4\16\1\74"+
    "\5\16\1\75\4\16\13\0\1\16\1\0\1\16\3\0"+
    "\1\16\1\0\23\16\1\76\4\16\13\0\1\16\1\0"+
    "\1\16\3\0\1\16\1\0\15\16\1\77\12\16\13\0"+
    "\1\16\1\0\1\16\3\0\1\16\1\0\4\16\1\100"+
    "\3\16\1\101\17\16\13\0\1\16\1\0\1\16\3\0"+
    "\1\16\1\0\20\16\1\102\7\16\53\0\1\11\2\0"+
    "\1\37\50\0\2\41\4\0\45\41\12\0\1\44\1\0"+
    "\1\44\3\0\1\16\1\0\30\16\15\0\1\103\50\0"+
    "\1\16\1\0\1\16\3\0\1\16\1\0\21\16\1\70"+
    "\6\16\13\0\1\16\1\0\1\16\3\0\1\16\1\0"+
    "\25\16\1\104\2\16\13\0\1\16\1\0\1\16\3\0"+
    "\1\16\1\0\3\16\1\70\24\16\13\0\1\16\1\0"+
    "\1\16\3\0\1\16\1\0\4\16\1\105\23\16\13\0"+
    "\1\16\1\0\1\16\3\0\1\16\1\0\14\16\1\106"+
    "\13\16\13\0\1\16\1\0\1\16\3\0\1\16\1\0"+
    "\5\16\1\107\22\16\13\0\1\16\1\0\1\16\3\0"+
    "\1\16\1\0\22\16\1\110\5\16\13\0\1\16\1\0"+
    "\1\16\3\0\1\16\1\0\4\16\1\111\23\16\13\0"+
    "\1\16\1\0\1\16\3\0\1\16\1\0\12\16\1\112"+
    "\15\16\13\0\1\16\1\0\1\16\3\0\1\16\1\0"+
    "\23\16\1\113\4\16\13\0\1\16\1\0\1\16\3\0"+
    "\1\16\1\0\16\16\1\114\11\16\13\0\1\16\1\0"+
    "\1\16\3\0\1\16\1\0\2\16\1\115\13\16\1\116"+
    "\11\16\13\0\1\16\1\0\1\16\3\0\1\16\1\0"+
    "\22\16\1\117\5\16\13\0\1\16\1\0\1\16\3\0"+
    "\1\16\1\0\1\50\27\16\13\0\1\16\1\0\1\16"+
    "\3\0\1\16\1\0\22\16\1\120\5\16\13\0\1\16"+
    "\1\0\1\16\3\0\1\16\1\0\26\16\1\121\1\16"+
    "\13\0\1\16\1\0\1\16\3\0\1\16\1\0\22\16"+
    "\1\122\5\16\13\0\1\16\1\0\1\16\3\0\1\16"+
    "\1\0\22\16\1\123\5\16\13\0\1\16\1\0\1\16"+
    "\3\0\1\16\1\0\22\16\1\124\5\16\13\0\1\16"+
    "\1\0\1\16\3\0\1\16\1\0\20\16\1\125\7\16"+
    "\13\0\1\16\1\0\1\16\3\0\1\16\1\0\4\16"+
    "\1\126\23\16\13\0\1\16\1\0\1\16\3\0\1\16"+
    "\1\0\16\16\1\70\11\16\13\0\1\16\1\0\1\16"+
    "\3\0\1\16\1\0\21\16\1\127\6\16\13\0\1\16"+
    "\1\0\1\16\3\0\1\16\1\0\10\16\1\121\17\16"+
    "\13\0\1\16\1\0\1\16\3\0\1\16\1\0\1\16"+
    "\1\130\26\16\13\0\1\16\1\0\1\16\3\0\1\16"+
    "\1\0\12\16\1\131\7\16\1\132\5\16\13\0\1\16"+
    "\1\0\1\16\3\0\1\16\1\0\13\16\1\133\14\16"+
    "\13\0\1\16\1\0\1\16\3\0\1\16\1\0\23\16"+
    "\1\134\4\16\13\0\1\16\1\0\1\16\3\0\1\16"+
    "\1\0\1\135\27\16\13\0\1\16\1\0\1\16\3\0"+
    "\1\16\1\0\1\136\27\16\13\0\1\16\1\0\1\16"+
    "\3\0\1\16\1\0\21\16\1\137\6\16\13\0\1\16"+
    "\1\0\1\16\3\0\1\16\1\0\10\16\1\140\17\16"+
    "\13\0\1\16\1\0\1\16\3\0\1\16\1\0\10\16"+
    "\1\141\17\16\13\0\1\16\1\0\1\16\3\0\1\16"+
    "\1\0\14\16\1\142\13\16\13\0\1\16\1\0\1\16"+
    "\3\0\1\16\1\0\21\16\1\143\6\16\13\0\1\16"+
    "\1\0\1\16\3\0\1\16\1\0\21\16\1\144\6\16"+
    "\13\0\1\16\1\0\1\16\3\0\1\16\1\0\12\16"+
    "\1\145\15\16\13\0\1\16\1\0\1\16\3\0\1\16"+
    "\1\0\12\16\1\146\15\16\13\0\1\16\1\0\1\16"+
    "\3\0\1\16\1\0\23\16\1\147\4\16\13\0\1\16"+
    "\1\0\1\16\3\0\1\16\1\0\4\16\1\150\23\16"+
    "\13\0\1\16\1\0\1\16\3\0\1\16\1\0\12\16"+
    "\1\151\15\16\13\0\1\16\1\0\1\16\3\0\1\16"+
    "\1\0\22\16\1\70\5\16\13\0\1\16\1\0\1\16"+
    "\3\0\1\16\1\0\4\16\1\46\23\16\13\0\1\16"+
    "\1\0\1\16\3\0\1\16\1\0\10\16\1\152\17\16"+
    "\13\0\1\16\1\0\1\16\3\0\1\16\1\0\16\16"+
    "\1\116\11\16\13\0\1\16\1\0\1\16\3\0\1\16"+
    "\1\0\1\153\27\16\13\0\1\16\1\0\1\16\3\0"+
    "\1\16\1\0\2\16\1\154\25\16\13\0\1\16\1\0"+
    "\1\16\3\0\1\16\1\0\7\16\1\70\20\16\13\0"+
    "\1\16\1\0\1\16\3\0\1\16\1\0\23\16\1\155"+
    "\4\16\13\0\1\16\1\0\1\16\3\0\1\16\1\0"+
    "\4\16\1\156\23\16\13\0\1\157\1\0\1\16\3\0"+
    "\1\16\1\0\30\16\13\0\1\16\1\0\1\16\3\0"+
    "\1\16\1\0\23\16\1\160\4\16\13\0\1\16\1\0"+
    "\1\16\3\0\1\16\1\0\4\16\1\70\23\16\13\0"+
    "\1\16\1\0\1\16\3\0\1\16\1\0\27\16\1\46"+
    "\13\0\1\16\1\0\1\16\3\0\1\16\1\0\20\16"+
    "\1\161\7\16\13\0\1\16\1\0\1\16\3\0\1\16"+
    "\1\0\22\16\1\162\5\16\13\0\1\16\1\0\1\16"+
    "\3\0\1\16\1\0\14\16\1\163\13\16\13\0\1\16"+
    "\1\0\1\16\3\0\1\16\1\0\13\16\1\164\14\16"+
    "\13\0\1\16\1\0\1\16\3\0\1\16\1\0\22\16"+
    "\1\165\5\16\13\0\1\16\1\0\1\16\3\0\1\16"+
    "\1\0\4\16\1\70\3\16\1\166\17\16\13\0\1\16"+
    "\1\0\1\16\3\0\1\16\1\0\7\16\1\167\20\16"+
    "\13\0\1\16\1\0\1\16\3\0\1\16\1\0\10\16"+
    "\1\170\17\16\13\0\1\16\1\0\1\16\3\0\1\16"+
    "\1\0\23\16\1\171\4\16\13\0\1\16\1\0\1\16"+
    "\3\0\1\16\1\0\22\16\1\46\5\16\13\0\1\16"+
    "\1\0\1\16\3\0\1\16\1\0\26\16\1\70\1\16"+
    "\13\0\1\16\1\0\1\16\3\0\1\16\1\0\1\172"+
    "\27\16\13\0\1\16\1\0\1\16\3\0\1\16\1\0"+
    "\15\16\1\173\12\16\13\0\1\16\1\0\1\16\3\0"+
    "\1\16\1\0\13\16\1\174\14\16\13\0\1\16\1\0"+
    "\1\16\3\0\1\16\1\0\4\16\1\175\23\16\13\0"+
    "\1\16\1\0\1\16\3\0\1\16\1\0\21\16\1\176"+
    "\6\16\13\0\1\16\1\0\1\16\3\0\1\16\1\0"+
    "\2\16\1\177\25\16\13\0\1\16\1\0\1\16\3\0"+
    "\1\16\1\0\12\16\1\200\5\16\1\201\1\202\6\16"+
    "\13\0\1\16\1\0\1\16\3\0\1\16\1\0\12\16"+
    "\1\203\15\16\13\0\1\204\1\0\1\16\3\0\1\16"+
    "\1\0\30\16\13\0\1\16\1\0\1\16\3\0\1\16"+
    "\1\0\1\205\27\16\13\0\1\16\1\0\1\16\3\0"+
    "\1\16\1\0\4\16\1\206\23\16\13\0\1\16\1\0"+
    "\1\16\3\0\1\16\1\0\1\207\27\16\13\0\1\16"+
    "\1\0\1\16\3\0\1\16\1\0\23\16\1\210\4\16"+
    "\13\0\1\16\1\0\1\16\3\0\1\16\1\0\5\16"+
    "\1\211\22\16\13\0\1\212\1\0\1\16\3\0\1\16"+
    "\1\0\30\16\13\0\1\16\1\0\1\16\3\0\1\16"+
    "\1\0\3\16\1\134\24\16\13\0\1\16\1\0\1\16"+
    "\3\0\1\16\1\0\1\16\1\70\26\16\13\0\1\16"+
    "\1\0\1\16\3\0\1\16\1\0\14\16\1\70\13\16"+
    "\13\0\1\16\1\0\1\16\3\0\1\16\1\0\4\16"+
    "\1\213\23\16\13\0\1\16\1\0\1\16\3\0\1\16"+
    "\1\0\25\16\1\214\2\16\13\0\1\16\1\0\1\16"+
    "\3\0\1\16\1\0\22\16\1\215\5\16\13\0\1\16"+
    "\1\0\1\16\3\0\1\16\1\0\22\16\1\216\5\16"+
    "\13\0\1\16\1\0\1\16\3\0\1\16\1\0\15\16"+
    "\1\217\12\16\13\0\1\16\1\0\1\16\3\0\1\16"+
    "\1\0\4\16\1\220\23\16\13\0\1\16\1\0\1\16"+
    "\3\0\1\16\1\0\4\16\1\221\10\16\1\222\12\16"+
    "\13\0\1\16\1\0\1\16\3\0\1\16\1\0\1\207"+
    "\7\16\1\223\17\16\13\0\1\16\1\0\1\16\3\0"+
    "\1\16\1\0\12\16\1\200\5\16\1\224\1\225\6\16"+
    "\13\0\1\16\1\0\1\16\3\0\1\16\1\0\14\16"+
    "\1\121\13\16\13\0\1\226\1\0\1\16\3\0\1\16"+
    "\1\0\30\16\13\0\1\16\1\0\1\16\3\0\1\16"+
    "\1\0\22\16\1\134\5\16\13\0\1\16\1\0\1\16"+
    "\3\0\1\16\1\0\1\227\27\16\13\0\1\16\1\0"+
    "\1\16\3\0\1\16\1\0\27\16\1\70\13\0\1\16"+
    "\1\0\1\16\3\0\1\16\1\0\12\16\1\200\15\16"+
    "\13\0\1\16\1\0\1\16\3\0\1\16\1\0\22\16"+
    "\1\230\5\16\13\0\1\16\1\0\1\16\3\0\1\16"+
    "\1\0\10\16\1\231\17\16\13\0\1\16\1\0\1\16"+
    "\3\0\1\16\1\0\14\16\1\232\13\16\13\0\1\16"+
    "\1\0\1\16\3\0\1\16\1\0\6\16\1\70\21\16"+
    "\13\0\1\16\1\0\1\16\3\0\1\16\1\0\16\16"+
    "\1\233\1\234\10\16\13\0\1\16\1\0\1\16\3\0"+
    "\1\16\1\0\4\16\1\50\23\16\13\0\1\16\1\0"+
    "\1\16\3\0\1\16\1\0\12\16\1\235\15\16\13\0"+
    "\1\16\1\0\1\16\3\0\1\16\1\0\14\16\1\236"+
    "\13\16\13\0\1\16\1\0\1\16\3\0\1\16\1\0"+
    "\4\16\1\237\23\16\13\0\1\16\1\0\1\16\3\0"+
    "\1\16\1\0\4\16\1\221\23\16\13\0\1\16\1\0"+
    "\1\16\3\0\1\16\1\0\21\16\1\240\6\16\13\0"+
    "\1\16\1\0\1\16\3\0\1\16\1\0\12\16\1\241"+
    "\15\16\13\0\1\16\1\0\1\16\3\0\1\16\1\0"+
    "\4\16\1\242\23\16\13\0\1\16\1\0\1\16\3\0"+
    "\1\16\1\0\21\16\1\243\6\16\13\0\1\16\1\0"+
    "\1\16\3\0\1\16\1\0\4\16\1\244\23\16\13\0"+
    "\1\16\1\0\1\16\3\0\1\16\1\0\4\16\1\245"+
    "\10\16\1\246\12\16\13\0\1\16\1\0\1\16\3\0"+
    "\1\16\1\0\23\16\1\247\4\16\13\0\1\16\1\0"+
    "\1\16\3\0\1\16\1\0\24\16\1\250\3\16\13\0"+
    "\1\16\1\0\1\16\3\0\1\16\1\0\11\16\1\70"+
    "\16\16\13\0\1\16\1\0\1\16\3\0\1\16\1\0"+
    "\16\16\1\251\11\16\13\0\1\16\1\0\1\16\3\0"+
    "\1\16\1\0\27\16\1\252\13\0\1\16\1\0\1\16"+
    "\3\0\1\16\1\0\12\16\1\211\15\16\13\0\1\16"+
    "\1\0\1\16\3\0\1\16\1\0\20\16\1\46\7\16"+
    "\13\0\1\16\1\0\1\16\3\0\1\16\1\0\4\16"+
    "\1\253\23\16\13\0\1\16\1\0\1\16\3\0\1\16"+
    "\1\0\21\16\1\46\6\16\13\0\1\16\1\0\1\16"+
    "\3\0\1\16\1\0\1\121\27\16\13\0\1\16\1\0"+
    "\1\16\3\0\1\16\1\0\20\16\1\121\7\16\13\0"+
    "\1\16\1\0\1\16\3\0\1\16\1\0\10\16\1\254"+
    "\17\16\13\0\1\16\1\0\1\16\3\0\1\16\1\0"+
    "\4\16\1\255\23\16\13\0\1\16\1\0\1\16\3\0"+
    "\1\16\1\0\15\16\1\246\12\16\13\0\1\16\1\0"+
    "\1\16\3\0\1\16\1\0\21\16\1\256\6\16\13\0"+
    "\1\257\1\0\1\16\3\0\1\16\1\0\30\16\13\0"+
    "\1\16\1\0\1\16\3\0\1\16\1\0\20\16\1\260"+
    "\7\16\13\0\1\16\1\0\1\16\3\0\1\16\1\0"+
    "\20\16\1\70\7\16\13\0\1\16\1\0\1\16\3\0"+
    "\1\16\1\0\22\16\1\261\5\16\13\0\1\16\1\0"+
    "\1\16\3\0\1\16\1\0\2\16\1\262\25\16\13\0"+
    "\1\16\1\0\1\16\3\0\1\16\1\0\4\16\1\263"+
    "\23\16\13\0\1\16\1\0\1\16\3\0\1\16\1\0"+
    "\4\16\1\264\23\16\13\0\1\16\1\0\1\16\3\0"+
    "\1\16\1\0\15\16\1\52\12\16\13\0\1\16\1\0"+
    "\1\16\3\0\1\16\1\0\13\16\1\265\14\16\13\0"+
    "\1\16\1\0\1\16\3\0\1\16\1\0\13\16\1\70"+
    "\14\16\13\0\1\16\1\0\1\16\3\0\1\16\1\0"+
    "\4\16\1\266\23\16\13\0\1\16\1\0\1\16\3\0"+
    "\1\16\1\0\14\16\1\147\13\16\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7396];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\4\1\1\11\2\1\1\11\22\1\1\11"+
    "\1\1\1\0\1\11\3\0\221\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[182];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    public int  line()   { return yyline; }
    public int  column() { return yycolumn; }
    public long pos()    { return yychar; }
    
    public String text() {
        return yytext();
    }
    
    public String unquote() {
        String lit = text();
        return lit.substring(1, lit.length() - 1);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token next() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new RuntimeException("Unexpected input '" + text() + "' at position " + pos());
            }
            // fall through
          case 9: break;
          case 2:
            { /* ignore */
            }
            // fall through
          case 10: break;
          case 3:
            { return new Keyword(text());
            }
            // fall through
          case 11: break;
          case 4:
            { return new Literal(Double.parseDouble(text()));
            }
            // fall through
          case 12: break;
          case 5:
            { yybegin(COMMENT);
            }
            // fall through
          case 13: break;
          case 6:
            { return new Identifier(text());
            }
            // fall through
          case 14: break;
          case 7:
            { yybegin(YYINITIAL);
            }
            // fall through
          case 15: break;
          case 8:
            { return new Literal(unquote());
            }
            // fall through
          case 16: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
